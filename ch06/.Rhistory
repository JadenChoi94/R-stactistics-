col="orange", border="red")
x2<-seq(min(a.8.mean), max(a.8.mean), length=1000)
y2<-dnorm( x=x2, mean=3, sd=s/sqrt(8))
lines(x2, y2, lty=2, lwd=2, col='blue')
hist(a.32.mean, prob=T, ylab="", xlab="", main="표본 크기 : 32",
col="orange", border="red")
x3<-seq(min(a.32.mean), max(a.32.mean), length=1000)
y3<-dnorm( x=x3, mean=3, sd=s/sqrt(32))
lines(x3, y3, lty=2, lwd=2, col='blue')
hist(a.64.mean, prob=T, ylab="", xlab="", main="표본 크기 : 64",
col="orange", border="red")
x4<-seq(min(a.64.mean), max(a.64.mean), length=1000)
y4<-dnorm( x=x4, mean=3, sd=s/sqrt(64))
lines(x4, y4, lty=2, lwd=2, col='blue')
t.2.mean<-rep(NA, n)
t.8.mean<-rep(NA, n)
t.32.mean<-rep(NA, n)
t.64.mean<-rep(NA, n)
for (i in 1:n){
t.2.mean[i]<-mean(rt(2, df=3))
t.8.mean[i]<-mean(rt(8, df=3))
t.32.mean[i]<-mean(rt(32, df=3))
t.64.mean[i]<-mean(rt(64, df=3))
}
options(digits=3)
c(mean(t.2.mean), sd(t.2.mean))
c(mean(t.8.mean), sd(t.8.mean))
c(mean(t.32.mean), sd(t.32.mean))
c(mean(t.64.mean), sd(t.64.mean))
par(mfrow=c(2,2))
hist(t.64.mean, prob=T, ylab="", xlab="", main="표본 크기 : 64",
col="orange", border="red")
x4<-seq(min(t.64.mean), max(t.64.mean), length=1000)
y4<-dnorm( x=x4, mean=3, sd=s/sqrt(64))
lines(x4, y4, lty=2, lwd=2, col='blue')
m<-df
s <- sqrt(2 * df)
data <- read.csv('2016.6th.csv', header=T)
str(data)
tmp <- subset(data, data$나이==7 )
height.p <- tmp$X104.키
set.seed(9)
height <- height.p[sample(length(height.p), 15)]
height
mean(height)
data <- read.csv('2016.6th.csv', header=T)
setwd('D:/Workspace/R-statistics/ch06')
data <- read.csv('2016.6th.csv', header=T)
str(data)
tmp <- subset(data, data$나이==7 )
height.p <- tmp$X104.키
set.seed(9)
height <- height.p[sample(length(height.p), 15)]
height
mean(height)
mu0 <- 1220
sd(height)
sqrt( length(height) )
(mean(height) - mu0) / (sd(height) / sqrt(length(height)))
pt(0.727, 14)
#===========================================================
(1230-1220)/(45.75/sqrt(15))
t.test(height, mu=1220)
#6장. rktjfrjawjd
#6-1.
setwd('D:/Workspace/R-statistics/ch06')
data <- read.csv('2016.6th.csv', header=T)
str(data)
tmp <- subset(data, data$나이==7 )
height.p <- tmp$X104.키
set.seed(9)
height <- height.p[sample(length(height.p), 15)]
height
mean(height)
mu0 <- 1220
sd(height)
sqrt( length(height) )
(mean(height) - mu0) / (sd(height) / sqrt(length(height)))
#===========================================================
(1230-1220)/(45.75/sqrt(15))#검정통계량 대신
t.test(height, mu=1220)#이렇게! 간단
#6-2. 단일 모집단의 가설검정
#예제 6-1.
data <- read.table("http://www.amstat.org/publications/jse/datasets/babyboom.dat.txt", header=F)
str( data )
names(data) <- c("time", "gender", "weight", "minutes")
tmp <- subset(data, gender==1)
weight <- tmp[[3]]
barx <- mean(weight)
s <- sd(weight)
n <- length(weight)
h0 <- 2800
( t.t <- (barx - h0) / (s / sqrt(n)) )
alpha <- 0.05
( c.u <- qt(1-alpha, df=n-1) )
( p.value <- 1 - pt(t.t, df=n-1) )
t.test(weight, mu=2800, alternative="greater")
data
tmp
tmp[[3]]
weight <- tmp[[3]]
barx <- mean(weight)
s <- sd(weight)
n <- length(weight)
n
barx
( t.t <- (barx - h0) / (s / sqrt(n)) )
( c.u <- qt(1-alpha, df=n-1) ) #df=자유도
( p.value <- 1 - pt(t.t, df=n-1) )
t.test(weight, mu=2800, alternative="greater")
# 도표 작성 : 그림 6-8
par(mar=c(0,1,1,1))
x <- seq(-3, 3, by=0.001)
y <- dt(x, df=n-1)
plot(x, y, type="l", axes=F, ylim=c(-0.02, 0.38), main="", xlab="t", ylab="")
abline(h=0)
polygon(c(c.u, x[x>c.u], 3), c(0, y[x>c.u], 0), col=2)
text(c.u, -0.02, expression(t[0.05]==1.74))
text(1.8, 0.2, expression(alpha == 0.05), cex=0.8)
arrows(1.8, 0.18, 1.8, 0.09, length=0.05)
polygon(c(t.t, x[x>t.t], 3), c(0, y[x>t.t], 0), density=20, angle=45)
text(t.t, -0.02, paste("t=", round(t.t, 3)), pos=4)
text(2.65, 0.1, expression(plain(P)(T>2.233) == 0.0196), cex=0.8)
arrows(2.7, 0.08, 2.5, 0.03, length=0.05)
#예제6-2. 단일 모비율 검정: 야구공의 불량률 검정
setwd('D:/Workspace/R-statistics/ch06')
tmp <- read.table("./data/restitution.txt", header=T)
tmp <- read.table("restitution.txt", header=T)
rel <- ifelse(tmp$rst < 0.4134 | tmp$rst > 0.4374, 1, 0)
n <- length(rel)
nos <- sum(rel)
sp <- nos / n
hp <- 0.1
(z <- (sp - hp) / sqrt( ( hp*(1-hp) )/n ) )
alpha <- 0.05
( c.u <- qnorm(1-alpha) )
( p.value <- 1 - pnorm(z) )
prop.test(nos, n, p=0.1, alternative="greater", correct=FALAE)
prop.test(nos, n, p=0.1, alternative="greater", correct=FALSE)
tmp <- read.table("restitution.txt", header=T)
rel <- ifelse(tmp$rst < 0.4134 | tmp$rst > 0.4374, 1, 0)
n <- length(rel)
nos <- sum(rel)
sp <- nos / n
hp <- 0.1
(z <- (sp - hp) / sqrt( ( hp*(1-hp) )/n ) )
alpha <- 0.05
( c.u <- qnorm(1-alpha) )
( p.value <- 1 - pnorm(z) )
#1-sample proportions test without continuity correction
prop.test(nos, n, p=0.1, alternative="greater", correct=FALSE)
# 도표 출력 : 그림 6-9
par(mar=c(0,1,1,1))
x <- seq(-3, 3, by=0.001)
y <- dnorm(x)
plot(x, y, type="l", axes=F, ylim=c(-0.02, 0.4), main="", xlab="z", ylab="")
abline(h=0)
polygon(c(c.u, x[x>c.u], 3), c(0, y[x>c.u], 0), col=2)
text(c.u, -0.02, expression(z[0.05]==1.645))
polygon(c(z, x[x>z], 3), c(0, y[x>z], 0), density=20, angle=45)
text(z, -0.02, paste("z=", round(z, 3)))
text(1.2, 0.3, paste("P(Z>z)=", round(p.value, 3)), cex=0.8)
# 도표 출력 : 그림 6-9
par(mar=c(0,1,1,1))
x <- seq(-3, 3, by=0.001)
y <- dnorm(x)
plot(x, y, type="l", axes=F, ylim=c(-0.02, 0.4), main="", xlab="z", ylab="")
abline(h=0)
polygon(c(c.u, x[x>c.u], 3), c(0, y[x>c.u], 0), col=2)
text(c.u, -0.02, expression(z[0.05]==1.645))
polygon(c(z, x[x>z], 3), c(0, y[x>z], 0), density=20, angle=45)
text(z, -0.02, paste("z=", round(z, 3)))
text(1.2, 0.3, paste("P(Z>z)=", round(p.value, 3)), cex=0.8)
weight <- tmp[[3]]
#6-2. 단일 모집단의 가설검정
#예제 6-1.
data <- read.table("http://www.amstat.org/publications/jse/datasets/babyboom.dat.txt", header=F)
str( data )
names(data) <- c("time", "gender", "weight", "minutes")
tmp <- subset(data, gender==1) #gender 1일 것만
weight <- tmp[[3]]
tmp[[3]]
mean(weight)
barx
data
alpha <- 0.05 #알파
( c.u <- qt(1-alpha, df=n-1) ) #df=자유도
c.u
t.t
p.value
t.test(weight, mu=2800, alternative="greater")
( c.u <- qt(1-alpha, df=n-1) ) #df=자유도
#5-4. 구간추정
#예제 5-4. 모평균에 대한 95% 신뢰구간
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3, 3, by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol=n)
xbar <- apply(smps, 1, mean)
se <- 1 / sqrt(10) #standard 표준오차
alpha <- 0.05
z <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z * se
plot(y, type="n", xlab="표본추출", ylab="z", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="red", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "red", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
qt(0.025, 4)
qt(0.025, 9)
plot(y, type="n", xlab="표본추출", ylab="z", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="red", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "red", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
l.c <- ifelse(ll * ul > 0, "green", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
l.c <- ifelse(ll * ul > 0, "blue", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
#모비율 추정 연습문제
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3, 3, by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol=n)
xbar <- apply(smps, 1, mean)
se <- 1 / sqrt(10) #standard error
alpha <- 0.05
p <- qnorm(1 - alpha/2)
ll <- xbar - p * se
ul <- xbar + p * se
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="red", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "blue", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
smps
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="blue", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "blue", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
par(ema=c(0,1,0,0))
par(oma=c(0,1,0,0))
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="blue", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "blue", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
par(oma=c(0,2,0,0))
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="blue", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "blue", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
par(mar=c(0,2,0,0))
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="blue", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "blue", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
par(mar)
par(mar=c())
par(mar=c(5,4,4,2))
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="blue", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "blue", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
par(mar=c(5,3,4,2))
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="blue", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "blue", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
par(mar=c(5,5,4,2))
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="blue", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "blue", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
smps
#모비율 추정 연습문제
#1
n <- 3
smps.all <- rolldie(n)
#모비율 추정 연습문제
#1
library(prob)
n <- 3
smps.all <- rolldie(n)
str( smps.all )
head( smps.all, n=3 )
is.even <- function(x) return(!x%%2)
var.p <- function(x) {
return( sum((x-mean(x))^2 / length(x))  )
}
#T=1, F=0
p.even <- function(x, s.size=3) {
return( sum(is.even(x)) / s.size )
}
phat <- apply(smps.all, 1, p.even)
mean(phat)
( p.p <- 0.5 )
var.p(phat)
( p.p*(1-p.p)/3 )
sqrt(var.p(phat))
smps.all <-  rbinom(n=10, size=1, prob=0.5)
smps.all
smps.all <-  rbinom(n=10, size=1, prob=1)
smps.all
smps.all <-  rbinom(n=10, size=2, prob=1)
smps.all
#2
ci.t <- function(x, alpha=0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m - t * (s / sqrt(n))
ul <- m + t * (s / sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return( ci )
}
smp <- c(1:1000)
ci.t(smp)
#3
ci.t(smp, 0.1)
#2
ci.t <- function(x, alpha=0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m - t * (s / sqrt(n))
ul <- m + t * (s / sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return( ci )
}
smp <- c(1:100)
ci.t(smp)
#3
ci.t <- function(x, alpha=0.05) {
n <- length(nsmp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m - t * (s / sqrt(n))
ul <- m + t * (s / sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return( ci )
}
nsmp <- c(1:100)
ci.t(nsmp, 0.1)
#4
battery<-c(980, 1008, 968, 1032, 1012, 996, 1021, 1002, 996, 1017)
s<-sd(battery)
n<-length(battery)
h0<-1000
barx<-mean(battery)
s<-sd(battery)
n<-length(battery)
h0<-1000
( t.t <- (barx - h0) / (s / sqrt(n)) )
alpha <- 0.05 #알파
( c.u <- qt(1-alpha, df=n-1) ) #df=자유도
( p.value <- 1 - pt(t.t, df=n-1) )
t.test(weight, mu=2800, alternative="two.sided")
( p.value <- 1 - pt(t.t, df=n-1) )
alpha <- 0.05 #알파
( c.u <- qt(1-alpha, df=n-1) ) #df=자유도
( p.value <- 1 - pt(t.t, df=n-1) )
#0.05보다 크기때문에 영가설을 채택합니다.
t.test(battery, mu=1000, alternative="two.sided")
#0.05보다 크기때문에 영가설을 채택합니다.
t.test(battery, mu=1000, alternative="greater")
#5
score<-c(58, 49, 39, 99, 32, 88, 62, 30, 55, 65, 44, 55, 57, 53, 88, 42, 39)
#5
score<-c(58, 49, 39, 99, 32, 88, 62, 30, 55, 65, 44, 55, 57, 53, 88, 42, 39)
t.test(score, mu=55, alternative="greater")
#6
alco<-c(15.50, 11.21, 12.67, 8.87, 12.15, 9.88, 2.06, 14.50, 0, 4.97)
#6
alco<-c(15.50, 11.21, 12.67, 8.87, 12.15, 9.88, 2.06, 14.50, 0, 4.97)
t.test(alco, mu=8.1, alternative="greater")
#6
alco<-c(15.50, 11.21, 12.67, 8.87, 12.15, 9.88, 2.06, 14.50, 0, 4.97)
t.test(alco, mu=8.1, alternative="two.sided")
#5
score<-c(58, 49, 39, 99, 32, 88, 62, 30, 55, 65, 44, 55, 57, 53, 88, 42, 39)
t.test(score, mu=55, alternative="greater")
#4
battery<-c(980, 1008, 968, 1032, 1012, 996, 1021, 1002, 996, 1017)
t.test(battery, mu=1000, alternative="two.sided")
#4
battery<-c(980, 1008, 968, 1032, 1012, 996, 1021, 1002, 996, 1017)
t.test(battery, mu=1000, alternative="two.sided")
ci
#2
ci.t <- function(x, alpha=0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m - t * (s / sqrt(n))
ul <- m + t * (s / sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return( ci )
}
smp <- c(1:100)
ci.t(smp)
#2
n<-10
p<-4/5
( dbinom(100, size=n, prob=p))
#2
n<-100
p<-4/5
( dbinom(3, size=n, prob=p))
t
#2
ci.t <- function(x, alpha=0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m - t * (s / sqrt(n))
ul <- m + t * (s / sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return( ci )
}
smp <- c(1:100)
ci.t(smp)
#모비율 추정 연습문제
#1
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3, 3, by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol=n)
xbar <- apply(smps, 1, mean)
se <- 1 / sqrt(10)
alpha <- 0.05
p <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z * se
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="red", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "red", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="red", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "red", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
par(mar=c(5,3,4,2))
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="red", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "red", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
par(mar=c(5,5,4,2))
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="red", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "red", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
#정규분포
#1
pnorm(750, mean=800, sd=40)
knitr::opts_chunk$set(echo = TRUE)
ci.t <- function(x, alpha=0.05) {
n <- length(smp)
m <- mean(x)
s <- sd(x)
t <- qt(1-(alpha/2), df=n-1)
ll <- m - t * (s / sqrt(n))
ul <- m + t * (s / sqrt(n))
ci <- c(1-alpha, ll, m, ul)
names(ci) <- c("Confidence Level", "Lower limit", "Mean", "Upper limit")
return( ci )
}
smp <- c(1:1000)
ci.t(smp, 0.1)
#모비율 추정 연습문제
#1
set.seed(9)
n <- 10
x <- 1:100
y <- seq(-3, 3, by=0.01)
smps <- matrix(rnorm(n * length(x)), ncol=n)
xbar <- apply(smps, 1, mean)
se <- 1 / sqrt(10)
alpha <- 0.05
p <- qnorm(1 - alpha/2)
ll <- xbar - z * se
ul <- xbar + z * se
par(mar=c(5,5,4,2))
plot(y, type="n", xlab="표본추출", ylab="P", xlim=c(1, 100), ylim=c(-1.5, 1.5), cex.lab=1.8)
abline(h=0, col="red", lwd=2, lty=2)
l.c <- rep(NA, length(x))
l.c <- ifelse(ll * ul > 0, "red", "black")
arrows(1:length(x), ll, 1:length(x), ul, code=3, angle=90, length=0.02, col=l.c, lwd=1.5)
