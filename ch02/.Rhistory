col="orange", border="red")
x1<-seq(min(a.2.mean), max(a.2.mean), length=1000)
y1<-dnorm(x=x1, mean=3, sd(3/sqrt(2)))
lines(x1, y1, lty=2, lwd=2, col='blue')
hist(a.8.mean, prob=T, ylab="", xlab="", main="표본 크기 : 8",
col="orange", border="red")
x2<-seq(min(a.8.mean), max(a.8.mean), length=1000)
y2<-dnorm( x=x2, mean=3, sd(1/sqrt(8)))
lines(x2, y2, lty=2, lwd=2, col='blue')
hist(a.32.mean, prob=T, ylab="", xlab="", main="표본 크기 : 32",
col="orange", border="red")
x3<-seq(min(a.32.mean), max(a.32.mean), length=1000)
y3<-dnorm( x=x3, mean=3, sd(1/sqrt(32)))
lines(x3, y3, lty=2, lwd=2, col='blue')
hist(a.64.mean, prob=T, ylab="", xlab="", main="표본 크기 : 64",
col="orange", border="red")
x4<-seq(min(a.64.mean), max(a.64.mean), length=1000)
y4<-dnorm( x=x4, mean=3, sd(1/sqrt(64)))
lines(x4, y4, lty=2, lwd=2, col='blue')
c(mean(a.2.mean), sd(a.2.mean))
par(mfrow=c(2,2))
hist(a.2.mean, prob=T, ylab="", xlab="", main="표본 크기 : 2",
col="orange", border="red")
x1<-seq(min(a.2.mean), max(a.2.mean), length=1000)
y1<-dnorm(x=x1, mean=3, sd(3/sqrt(2)))
lines(x1, y1, lty=2, lwd=2, col='blue')
par(mfrow=c(2,2))
hist(a.2.mean, prob=T, ylab="", xlab="", main="표본 크기 : 2",
col="orange", border="red")
x1<-seq(min(a.2.mean), max(a.2.mean), length=1000)
y1<-dnorm(x=x1, mean=3, sd(2/sqrt(2)))
lines(x1, y1, lty=2, lwd=2, col='blue')
sqrt(4)
par(mfrow=c(2,2))
hist(a.2.mean, prob=T, ylab="", xlab="", main="표본 크기 : 2",
col="orange", border="red")
x1<-seq(min(a.2.mean), max(a.2.mean), length=1000)
y1<-dnorm(x=x1, mean=3, sd(2/sqrt(2)))
lines(x1, y1, lty=2, lwd=2, col='blue')
sqrt(128)
c(mean(a.2.mean), sd(a.2.mean))
df<-3
a.2.mean[i]<-mean(rchisq(2, df=df))
c(mean(a.2.mean), sd(a.2.mean))
df<-3
s <- sqrt(2 * df)
par(mfrow=c(2,2))
hist(a.2.mean, prob=T, ylab="", xlab="", main="표본 크기 : 2",
col="orange", border="red")
x1<-seq(min(a.2.mean), max(a.2.mean), length=1000)
y1<-dnorm(x=x1, mean=3, sd=s/sqrt(2)))
lines(x1, y1, lty=2, lwd=2, col='blue')
n<-1000
df<-3
s <- sqrt(2 * df)
a.2.mean<-rep(NA, n)
a.8.mean<-rep(NA, n)
a.32.mean<-rep(NA, n)
a.64.mean<-rep(NA, n)
for (i in 1:n){
a.2.mean[i]<-mean(rchisq(2, df=df))
a.8.mean[i]<-mean(rchisq(8, df=3))
a.32.mean[i]<-mean(rchisq(32, df=3))
a.64.mean[i]<-mean(rchisq(64, df=3))
}
options(digits=3)
c(mean(a.2.mean), sd(a.2.mean))
c(mean(a.8.mean), sd(a.8.mean))
c(mean(a.32.mean), sd(a.32.mean))
c(mean(a.64.mean), sd(a.64.mean))
par(mfrow=c(2,2))
hist(a.2.mean, prob=T, ylab="", xlab="", main="표본 크기 : 2",
col="orange", border="red")
x1<-seq(min(a.2.mean), max(a.2.mean), length=1000)
y1<-dnorm(x=x1, mean=3, sd=s/sqrt(2)))
lines(x1, y1, lty=2, lwd=2, col='blue')
x1<-seq(min(a.2.mean), max(a.2.mean), length=1000)
y1<-dnorm(x=x1, mean=3, sd=s/sqrt(2))
lines(x1, y1, lty=2, lwd=2, col='blue')
hist(a.8.mean, prob=T, ylab="", xlab="", main="표본 크기 : 8",
col="orange", border="red")
x2<-seq(min(a.8.mean), max(a.8.mean), length=1000)
y2<-dnorm( x=x2, mean=3, sd=s/sqrt(8))
lines(x2, y2, lty=2, lwd=2, col='blue')
hist(a.32.mean, prob=T, ylab="", xlab="", main="표본 크기 : 32",
col="orange", border="red")
x3<-seq(min(a.32.mean), max(a.32.mean), length=1000)
y3<-dnorm( x=x3, mean=3, sd=s/sqrt(32))
lines(x3, y3, lty=2, lwd=2, col='blue')
hist(a.64.mean, prob=T, ylab="", xlab="", main="표본 크기 : 64",
col="orange", border="red")
x4<-seq(min(a.64.mean), max(a.64.mean), length=1000)
y4<-dnorm( x=x4, mean=3, sd=s/sqrt(64))
lines(x4, y4, lty=2, lwd=2, col='blue')
t.2.mean<-rep(NA, n)
t.8.mean<-rep(NA, n)
t.32.mean<-rep(NA, n)
t.64.mean<-rep(NA, n)
for (i in 1:n){
t.2.mean[i]<-mean(rt(2, df=3))
t.8.mean[i]<-mean(rt(8, df=3))
t.32.mean[i]<-mean(rt(32, df=3))
t.64.mean[i]<-mean(rt(64, df=3))
}
options(digits=3)
c(mean(t.2.mean), sd(t.2.mean))
c(mean(t.8.mean), sd(t.8.mean))
c(mean(t.32.mean), sd(t.32.mean))
c(mean(t.64.mean), sd(t.64.mean))
par(mfrow=c(2,2))
hist(t.64.mean, prob=T, ylab="", xlab="", main="표본 크기 : 64",
col="orange", border="red")
x4<-seq(min(t.64.mean), max(t.64.mean), length=1000)
y4<-dnorm( x=x4, mean=3, sd=s/sqrt(64))
lines(x4, y4, lty=2, lwd=2, col='blue')
m<-df
s <- sqrt(2 * df)
#예제 9-1. 아버지와 ㅏ들 키의 공분산과 상관계수
hf <- read.csv("http://www.math.uah.edu/stat/data/Galton.csv", header=T, stringsAsFactors = FALSE)
str(hf)
#예제 9-1. 아버지와 ㅏ들 키의 공분산과 상관계수
hf <- read.csv("http://www.math.uah.edu/stat/data/Galton.csv", header=T, stringsAsFactors = FALSE)
str(hf)
#예제 9-1. 아버지와 ㅏ들 키의 공분산과 상관계수
hf <- read.csv("http://www.randomservices.org/random/data/Galton.txt", header=T, stringsAsFactors = FALSE)
str(hf)
hf$Gender <- factor(hf$Gender, levels=c("M", "F"))
hf.son <- subset(hf, Gender=="M")
#예제 9-1. 아버지와 ㅏ들 키의 공분산과 상관계수
hf <- read.table("http://www.randomservices.org/random/data/Galton.txt", header=T, stringsAsFactors = FALSE)
str(hf)
hf$Gender <- factor(hf$Gender, levels=c("M", "F"))
hf.son <- subset(hf, Gender=="M")
hf.son <- hf.son[c("Father", "Height")]
str(hf.son)
f.mean <- mean(hf.son$Father)
s.mean <- mean(hf.son$Height)
cov.num <- sum( (hf.son$Father-f.mean) * (hf.son$Height - s.mean) )
cov.num
(cov.xy <- cov.num / (nrow(hf.son) - 1))
cov(hf.son$Father, hf.son$Height)
(r.xy <- cov.xy / (sd(hf.son$Father) * sd(hf.son$Height)))
#R함수를 이용한 상관계수
cor(hf.son$Father, hf.son$Height)
hf.son
# 그림 9-2
par(mfrow=c(1, 1), mar=c(4, 4, 1, 1))
plot(Height~Father, pch=16, data=hf.son, xlab="아버지의 키(인치)", ylab="아들의 키(인치)")
abline(lm(Height~Father, data=hf.son), col="red", lwd=2)
plot(hf$Height, hf$Father)
hf$Gender <- factor(hf$Gender, levels=c("M", "F"))
hf.son <- subset(hf, Gender=="M")
hf.son <- hf.son[c("Father", "Height")]
mean.x <- mean(hf.son$Father)
mean.y <- mean(hf.son$Height)
sxy <- sum((hf.son$Father - mean.x)*(hf.son$Height - mean.y))
sxx <- sum((hf.son$Father - mean.x)^2)
( b1 <- sxy / sxx )
( b0 <- mean.y - b1 * mean.x )
# lm() 함수 이용
lm(Height ~ Father, data=hf.son)
# lm() 함수 이용
out<-lm(Height ~ Father, data=hf.son)
summary(out)
mean.x <- mean(hf.son$Father)
mean.y <- mean(hf.son$Height)
sxy <- sum((hf.son$Father - mean.x)*(hf.son$Height - mean.y))
sxx <- sum((hf.son$Father - mean.x)^2)
( b1 <- sxy / sxx )
( b0 <- mean.y - b1 * mean.x )
# lm() 함수 이용 //linear model
out<-lm(Height ~ Father, data=hf.son)#앞이 y, 뒤가 x
summary(out)
#Polynomial Regression
women
#신장에 따른 몸무게
plot(weight~height, women)
fit<-lm(weight~height, women)
abline(fir, col='red', lwd=2)
abline(fit, col='red', lwd=2)
summary(fit)
cor.test(women$weight, women$height)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
fit2<-lm(weight~height, women)
plot(weight~height, women)
lines(women$height, fitted(fit2), col='green', led=2)
lines(women$height, fitted(fit2), col='green', lwd=2)
lines(women$height, fitted(fit2), col='green', lwd=2)
summary(fit2)
par(mfrow=c(1,1))
fit2<-lm(weight~height, women)
plot(weight~height, women)
lines(women$height, fitted(fit2), col='green', lwd=2)
summary(fit2)
summary(fit2)
par(mfrow=c(2,2))
plot(fit2)
par(mfrow=c(1,1))
fit2<-lm(weight~height+I(height^2), women)
plot(weight~height, women)
lines(women$height, fitted(fit2), col='green', lwd=2)
summary(fit2)
par(mfrow=c(2,2))
plot(fit2)
par(mfrow=c(1,1))
fit3<-lm(weight~height+I(height^2)+I(height^3), women)
plot(weight~height, women)
lines(women$height, fitted(fit3), col='orange', lwd=2)
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
par(mfrow=c(1,1))
AIC(fit2)
AIC(fit3)
#다중회귀분석
state.x77
states<-as.data.frame(state.x77[,c('Murder', 'Population','Illiteracy','Income','Frost')])
fit<-lm(Murder~population+Illiteracy+Income+Frost, data=states)
fit<-lm(Murder~Population+Illiteracy+Income+Frost, data=states)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
fit1<-lm(Murder~., data=states)
summary(fit1)
fit2<-lm(Murder~Population+Illiteracy, data=states)
summary(fit2)
fit3<-lm(Murder~1, states)
step(fit3m direction='forward',
scope=~Population+Illiteracy+Income+Frost)
step(fit3, direction='forward',
scope=~Population+Illiteracy+Income+Frost)
#Akaike information criteria
AIC(fit2, fit3)#값이 적을수록 좋은 모델
#Backward stepwise regression, Forward stepwise regression
step(fit1, direction='backward')
fit3<-lm(Murder~1, states)
step(fit3, direction='forward',
scope=~Population+Illiteracy+Income+Frost)
step(fit3, direction='forward', scope=list(upper=fit1, lower=fit3) )
install.packages('leafs')
install.packages('leaps')
library(leaps)
subsets<-regsubsets(Murder~., data=states, method='seqrep', nbest=4)
subsets<-regsubsets(Murder~., data=states, method='seqrep', nbest=4)
subsets<-regsubsets(Murder~., data=states, method='seqrep', nbest=4)
summary(subsets)
plot(subsets)
subsets
subsets2<-regsubsets(Murder~., data=states, method='exhaustive', nbest=2)
summary(subsets)
summary(subsets2)
plot(subsets2)
plot(subsets)
summary(subsets)
plot(subsets2)
summary(subsets2)
#
data<-read.csv("http://stats.idre.ucla.edu/stat/data/binary.csv")
data$rank<-as.factor(data$rank)
str(data)
#값이 0 아니면 1, 합격, 불합격: logistic regression
train<-data[1:200]
#값이 0 아니면 1, 합격, 불합격: logistic regression
train<-data[1:200, ]
test<-data[201:400, ]
model<-glm(admit~gre+gpa+rank, data=data, family = 'binomial')
summary(model)
#값이 0 아니면 1, 합격, 불합격: logistic regression
train<-data[1:200, ]
test<-data[201:400, ]
#glm: general
model<-glm(admit~gre+gpa+rank, data=data, family = 'binomial')
summary(model)
model2<-glm(admit~gpa+rank, data=data, family = 'binomial')
summary(model2)
AIC(model2)
AIC(model, model2)
# lm() 함수 이용 //linear model
out<-lm(Height ~ Father, data=hf.son)#앞이 y, 뒤가 x
summary(out)
#다중회귀분석
state.x77
states<-as.data.frame(state.x77[,c('Murder', 'Population','Illiteracy','Income','Frost')])
states
father<-c(150  160  170  180  190)
father<-c(150  160  170  180  190)
View(states)
father<-c(150  160  170  180  190)
x<-c(150  160  170  180  190)
father<-c(150, 160,  170,  180,  190)
son<-c(176,  179,  182,  181,  185)
k<-lm(father~son)
abline(k)
k<-lm(father~son)
abline(k)
k
father<-c(150, 160, 170, 180, 190)
son<-c(176, 179, 182, 181, 185)
k<-lm(father~son)
abline(k)
k
k<-lm(son~father)
abline(k)
k
0.2*165+146.6
#아버지의 키가 165cm일 때 아들의 키
(0.2*165+146.6)
income<-c(100,  200,  300,  400,  500)
pay<-c(30, 70, 85, 140, 197)
v<-lm(pay~income)
v
(0.4*250-16)
#월 소득이 250만원일 때 신용카드 사용량
cat((0.4*250-16),'만원')
#아버지의 키가 165cm일 때 아들의 키
cat((0.2*165+146.6),'cm')
#3. mtcars 데이터셋에서 배기량(disp)에 따른 마력(hp)의 회귀식을 구하시오.
mtcars
#3. mtcars 데이터셋에서 배기량(disp)에 따른 마력(hp)의 회귀식을 구하시오.
library(dplyr)
mtcars %>%
select(disp, hp)
g<-mtcars %>%
select(disp, hp)
reg_g<-lm(g$hp~g$disp)
reg_g
g$disp
reg_g<-lm(g$hp~g$disp)
reg_g
#4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여 Boston 인근의
#   집값을 결정하는 다중회귀 모델을 만드시오.
library(MASS)
MASS
View(MASS)
MASS
#4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여 Boston 인근의
#   집값을 결정하는 다중회귀 모델을 만드시오.
install.packages('MASS')
install.packages("MASS")
#4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여 Boston 인근의
#   집값을 결정하는 다중회귀 모델을 만드시오.
install.packages('MASS')
install.packages("MASS")
library(MASS)
MASS
View(MASS)
#4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여 Boston 인근의
#   집값을 결정하는 다중회귀 모델을 만드시오.
library(Boston)
View(Boston)
#4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여 Boston 인근의
#   집값을 결정하는 다중회귀 모델을 만드시오.
Boston
states<-as.data.frame(state.x77[,c('Murder', 'Population','Illiteracy','Income','Frost')])
fit<-lm(Murder~Population+Illiteracy+Income+Frost, data=states)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
fit1<-lm(Murder~., data=states)
summary(fit1)
#4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여 Boston 인근의
#   집값을 결정하는 다중회귀 모델을 만드시오.
haed(Boston)
#4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여 Boston 인근의
#   집값을 결정하는 다중회귀 모델을 만드시오.
Boston
#4. MASS 패키지를 설치하고, 이 패키지 안에 있는 Boston 데이터셋을 이용하여 Boston 인근의
#   집값을 결정하는 다중회귀 모델을 만드시오.
head(Boston)
#[06]  RM	주택 1가구당 평균 방의 개수
#[07]  AGE	1940년 이전에 건축된 소유주택의 비율
#[08]  DIS	5개의 보스턴 직업센터까지의 접근성 지수
#[09]  RAD	방사형 도로까지의 접근성 지수
#[10]  TAX	10,000 달러 당 재산세율 $
#[11]  PTRATIO	자치시(town)별 학생/교사 비율 $
#[12]  B	1000(Bk-0.63)^2, 여기서 Bk는 자치시별 흑인의 비율을 말함.
#[13]  LSTAT	모집단의 하위계층의 비율(%)
#[14]  MEDV	본인 소유의 주택가격(중앙값) (단위: $1,000)
#출처: https://ai-times.tistory.com/431 [ai-times]
v<-lm(medv~., data=Boston)
v<-lm(pay~income)
#[06]  RM	주택 1가구당 평균 방의 개수
#[07]  AGE	1940년 이전에 건축된 소유주택의 비율
#[08]  DIS	5개의 보스턴 직업센터까지의 접근성 지수
#[09]  RAD	방사형 도로까지의 접근성 지수
#[10]  TAX	10,000 달러 당 재산세율 $
#[11]  PTRATIO	자치시(town)별 학생/교사 비율 $
#[12]  B	1000(Bk-0.63)^2, 여기서 Bk는 자치시별 흑인의 비율을 말함.
#[13]  LSTAT	모집단의 하위계층의 비율(%)
#[14]  MEDV	본인 소유의 주택가격(중앙값) (단위: $1,000)
#출처: https://ai-times.tistory.com/431 [ai-times]
boston_house<-lm(medv~., data=Boston)
v<-lm(pay~income)
summary(fit)
summary(boston_house)
plot(boston_house)
#[07]  AGE	1940년 이전에 건축된 소유주택의 비율
#[08]  DIS	5개의 보스턴 직업센터까지의 접근성 지수
#[09]  RAD	방사형 도로까지의 접근성 지수
#[10]  TAX	10,000 달러 당 재산세율 $
#[11]  PTRATIO	자치시(town)별 학생/교사 비율 $
#[12]  B	1000(Bk-0.63)^2, 여기서 Bk는 자치시별 흑인의 비율을 말함.
#[13]  LSTAT	모집단의 하위계층의 비율(%)
#[14]  MEDV	본인 소유의 주택가격(중앙값) (단위: $1,000)
#출처: https://ai-times.tistory.com/431 [ai-times]
boston_house<-lm(medv~., data=Boston)
summary(boston_house)
par(mfrow=c(13,13))
plot(boston_house)
#[06]  RM	주택 1가구당 평균 방의 개수
#[07]  AGE	1940년 이전에 건축된 소유주택의 비율
#[08]  DIS	5개의 보스턴 직업센터까지의 접근성 지수
#[09]  RAD	방사형 도로까지의 접근성 지수
#[10]  TAX	10,000 달러 당 재산세율
#[11]  PTRATIO	자치시(town)별 학생/교사 비율
#[12]  B	1000(Bk-0.63)^2, 여기서 Bk는 자치시별 흑인의 비율을 말함.
#[13]  LSTAT	모집단의 하위계층의 비율(%)
#[14]  MEDV	본인 소유의 주택가격(중앙값) (단위: $1,000)
#출처: https://ai-times.tistory.com/431 [ai-times]
boston_house<-lm(medv~., data=Boston)
summary(boston_house)
par(mfrow=c(10,10))
plot(boston_house)
par(mfrow=c(5,5))
plot(boston_house)
par(mfrow=c(3,3))
plot(boston_house)
par(mfrow=c(2,2))
plot(boston_house)
fit3
fit3<-lm(Murder~1, states)
fit3
states<-as.data.frame(state.x77[,c('Murder', 'Population','Illiteracy','Income','Frost')])
fit<-lm(Murder~Population+Illiteracy+Income+Frost, data=states)
summary(fit)
par(mfrow=c(2,2))
plot(fit)
par(mfrow=c(1,1))
fit1<-lm(Murder~., data=states)
summary(fit1)
fit2<-lm(Murder~Population+Illiteracy, data=states)
summary(fit2)
# Akaike information criteria
AIC(fit2, fit3)#값이 적을수록 좋은 모델
# 자동화 stepwise
# step(fit1, direction='both')
# Backward stepwise regression, Forward stepwise regression
step(fit1, direction='backward')
fit3<-lm(Murder~1, states)
fit3
scope=~Population+Illiteracy+Income+Frost
scope
step(fit3, direction='both')
states
boston_house
lm(medv~., data=Boston)
step(boston_house, direction='both')
Boston
step(boston_house, direction='both')
# 자동화 stepwise
# step(fit1, direction='both')
# Backward stepwise regression, Forward stepwise regression
step(fit1, direction='backward')
library(leaps)
subsets<-regsubsets(medv~., data=boston_house, method='seqrep', nbest=4)
regsubsets(medv~., data=boston_house, method='seqrep', nbest=4)
regsubsets(medv~., data=boston, method='seqrep', nbest=4)
regsubsets(medv~., data=Boston, method='seqrep', nbest=4)
housing<-regsubsets(medv~., data=Boston, method='seqrep', nbest=4)
summary(housing)
housing<-regsubsets(medv~., data=Boston, method='seqrep', nbest=2)
summary(housing)
housing<-regsubsets(medv~., data=Boston, method='seqrep', nbest=4)
summary(housing)
knitr::opts_chunk$set(echo = TRUE)
#   아버지의 키(x):	150  160  170  180  190
#   아들의 키(y):	176  179  182  181  185
father<-c(150, 160, 170, 180, 190)
son<-c(176, 179, 182, 181, 185)
k<-lm(son~father)
k
#아버지의 키가 165cm일 때 아들의 키
cat((0.2*165+146.6),'cm')
#   아버지의 키(x):	150  160  170  180  190
#   아들의 키(y):	176  179  182  181  185
father<-c(150, 160, 170, 180, 190)
son<-c(176, 179, 182, 181, 185)
k<-lm(son~father)
k
#아버지의 키가 165cm일 때 아들의 키
cat((0.2*165+146.6),'cm')
#   월 소득(x):	100  200  300  400  500
#   카드 사용량(y):	 30    70    85  140  197
income<-c(100,  200,  300,  400,  500)
pay<-c(30, 70, 85, 140, 197)
v<-lm(pay~income)
v
#월 소득이 250만원일 때 신용카드 사용량
cat((0.4*250-16),'만원')
library(dplyr)
g<-mtcars %>%
select(disp, hp)
reg_g<-lm(g$hp~g$disp)
reg_g
g
reg_g<-lm(g$hp~g$disp)
reg_g
v
